/* SCCS  @(#)xnsl_tcltk_graph.C	1.1---95/08/13--21:05:31 */
//
//	xnsl_tcltk_graph.C
//

#include "xkernel.h"
#include "nsl_kernel.h" 
# include "xnsl_tcltk_include.h"

extern int NSL_TK_FLUSH;
typedef char nsl_long_string[256];

xnsl_tcltk_graph::xnsl_tcltk_graph() : xnsl_tcltk_widget()
{
        set_type("graph");
        set_abstract_type("graph");
}
xnsl_tcltk_graph::~xnsl_tcltk_graph()
{
}
xnsl_widget* xnsl_tcltk_graph::make_widget()
{
	return new xnsl_tcltk_graph;
}

int xnsl_tcltk_graph::display()
{
	return 1;
}
int xnsl_tcltk_graph::xflush()
{
	if (NSL_TK_FLUSH == 1)
		Tcl_Eval(NSL_TCL_INTERP,"update idletasks");

	return 1;
}

int xnsl_tcltk_graph::clear_area(int wx0,int wy0,int wx1,int wy1)
{
//	(wx0,wy0) is lower left corner.
//	 wx1: width, wy1: height

	nsl_string str;

	sprintf(str,"%s",_wname); 

	Tk_Window tkmain = Tk_MainWindow(NSL_TCL_INTERP);
	Tk_Window tkwin;

	if (tkmain != NULL)
		tkwin = Tk_NameToWindow(NSL_TCL_INTERP,str,tkmain);
	else
		cmd_error(" xnsl_tcltk_graph::draw_line NULL tkmain");

	if (tkmain != NULL && tkwin != NULL) {
		Screen* _sc = Tk_Screen(tkwin);
		Display* _dpy = Tk_Display(tkwin);
		Window _xwin = Tk_WindowId(tkwin);
		GC _gc = DefaultGC(_dpy, DefaultScreen(_dpy));

		// SET GC WHITE FOR DRAWING
		XSetForeground(_dpy,_gc,WhitePixelOfScreen(_sc));
		XFillRectangle(_dpy,_xwin,_gc,wx0,wy0,wx1,wy1);
	}
	else
		cmd_error(" xnsl_tcltk_graph::clear_area NULL tkwin");
	
/*	nsl_long_string str;
	char c = 'p';

	sprintf(str,"%s create rectangle %d%c %d%c %d%c %d%c -fill white -outline white" \
		,_wname,wx0,c,wy0,c,wx0+wx1,c,wy0+wy1,c);

	Tcl_Eval(NSL_TCL_INTERP,str);
*/
	return 1;
}
int xnsl_tcltk_graph::fill_rectangle(int wx0,int wy0,int wx1,int wy1,
	int ni,int nj,int pos)
{
//	(wx0,wy0) is lower left corner.
//	 wx1: width, wy1: height

	nsl_string str;

	sprintf(str,"%s",_wname); 

	Tk_Window tkmain = Tk_MainWindow(NSL_TCL_INTERP);
	Tk_Window tkwin;

	if (tkmain != NULL)
		tkwin = Tk_NameToWindow(NSL_TCL_INTERP,str,tkmain);
	else
		cmd_error(" xnsl_tcltk_graph::draw_line NULL tkmain");

	if (tkmain != NULL && tkwin != NULL) {
		Screen* _sc = Tk_Screen(tkwin);
		Display* _dpy = Tk_Display(tkwin);
		Window _xwin = Tk_WindowId(tkwin);
		GC _gc = DefaultGC(_dpy, DefaultScreen(_dpy));

		// SET GC BLACK FOR DRAWING
		XSetForeground(_dpy,_gc,BlackPixelOfScreen(_sc));
       		XFillRectangle(_dpy,_xwin,_gc,wx0,wy0,wx1,wy1);

		if (pos != 1) // -fill white -outline black
		{
			// SET GC WHITE FOR DRAWING
			XSetForeground(_dpy,_gc,WhitePixelOfScreen(_sc));
			XFillRectangle(_dpy,_xwin,_gc,wx0+1,wy0+1,wx1-2,wy1-2);
		}
	}
	else
		cmd_error(" xnsl_tcltk_graph::fill_rectangle NULL tkwin");
	
/*	nsl_long_string str;
	nsl_string pos_str;
	nsl_string istr;
	char c = 'p';

	if (pos == 1)
		sprintf(pos_str," -fill black -outline black");
	else
		sprintf(pos_str," -fill white -outline black");

	sprintf(istr,"%s%d%d",_wname,ni,nj);

	// delete all rectangles first
	sprintf(str,"%s delete %s",_wname,istr);
	// itemconfigure

	Tcl_Eval(NSL_TCL_INTERP,str);

	// create new rectangles
	sprintf(str,"%s create rectangle %d%c %d%c %d%c %d%c %s -tags %s",_wname,wx0,c,wy0,c,wx0+wx1,c,wy0+wy1,c,pos_str,istr);

	Tcl_Eval(NSL_TCL_INTERP,str);
*/
	return 1;
}
int xnsl_tcltk_graph::draw_line(int wx0,int wy0,int wx1,int wy1,
	const char* color,int fg)
{
	nsl_string str;
	nsl_string line_color;

	sprintf(str,"%s",_wname); 

	if (fg == 1)
	{
		char c = ' ';
		if (color != 0 && strcmp(color,"") != 0) // color != "" 
		{
			strcpy(line_color,color);
		}
		else
		{
			strcpy(line_color,"black");
		}

		sprintf(str,"%s create line %d%c %d%c %d%c %d%c -fill %s",
		    _wname,wx0,c,_height-wy0,c,wx1,c,_height-wy1,c,line_color);

		Tcl_Eval(NSL_TCL_INTERP,str);
	}
	else 
	{
		Tk_Window tkmain = Tk_MainWindow(NSL_TCL_INTERP);
		Tk_Window tkwin;

		if (tkmain != NULL)
			tkwin = Tk_NameToWindow(NSL_TCL_INTERP,str,tkmain);
		else
			cmd_error(" xnsl_tcltk_graph::draw_line NULL tkmain");

		if (tkmain != NULL && tkwin != NULL) 
		{
			Display* _dpy = Tk_Display(tkwin);
			Window _xwin = Tk_WindowId(tkwin);


//			GC _gc = DefaultGC(_dpy, DefaultScreen(_dpy));
// cj 13/Oct/98
// Es necesario crear un contexto grafico (GC) con valores
// por omision para usar las funciones de Xlib. La mascara es
// un cero indicando que no hay cambio en ninguno de los 
// miembros de la estructura y el apuntador a los nuevos valores
// es nulo (pues no existen tales).
			GC _gc = XCreateGC(_dpy, _xwin, 0, NULL);

			XDrawLine(_dpy,_xwin,_gc,
				wx0,_height-wy0,wx1,_height-wy1);
		}
		else
			cmd_error(" xnsl_tcltk_graph::draw_line NULL tkwin");
		Tcl_Eval(NSL_TCL_INTERP,"update idletasks");
	}
	
	return 1;
}
int xnsl_tcltk_graph::draw_grid(int wx0,int wy0,int wx1,int wy1,
	int wxs,int wys,num_type x0, num_type y0, num_type x1, num_type y1, 
	num_type xs, num_type ys,int fg)
{
	nsl_long_string str;
	
	char c = 'p';
	
	if (fg == 0)
		sprintf(str,"gridArray %s %d %d %d %d %d %d",_wname,
			wx0,wy0,wx1,wy1,wxs,wys);
	else
		sprintf(str,"grid %s %d %d %d %d %f %f %f %f %f %f %c",
			_wname,wx0,wy0,wx1,wy1,x0,y0,x1,y1,xs,ys,c);

	Tcl_Eval(NSL_TCL_INTERP,str);

	return 1;
}
int xnsl_tcltk_graph::draw_text(int wx,int wy,const char* text)
{
	nsl_long_string str;
	char c = 'p';

	sprintf(str,"%s create text %d%c %d%c -text %s -anchor sw"	\
		,_wname,wx,c,_height-wy,c,text);

	Tcl_Eval(NSL_TCL_INTERP,str);

	return 1;
}

xnsl_widget* xnsl_tcltk_graph::create_widget(const char *wname,
	xnsl_widget* pxnsl_widget,int x,int y,int w,int h,
	int,int,int,int,int,int,const char*,const char*)
{
	strcpy(_wname,wname);
	_X0 = x;
	_Y0 = y;
	_width = w;
	_height = h;

	return this;
}

void xnsl_tcltk_graph::set_env(const char*,int,int,int,int,int,int,
	int,int,int,int,const char*,const char*)
{
}

int xnsl_tcltk_graph::print(ostream&) const
{
	return 1;
}


